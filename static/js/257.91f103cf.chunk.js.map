{"version":3,"file":"static/js/257.91f103cf.chunk.js","mappings":"qZAIA,MAAMA,EAAgB,WAAoB,IAAnBC,EAASC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAClC,MAAMG,GAAUC,EAAAA,EAAAA,eAAmBL,IAC7B,SAAEM,EAAQ,SAAEC,GAAaH,EAG/B,MAAO,CAAEA,UAASE,WAAUC,WAAUC,WAFnBA,KAAMC,EAAAA,EAAAA,YAAgBL,GAG3C,ECRaA,EAAUL,EAAc,CAAC,IAEzB,SAAEO,EAAQ,SAAEC,EAAQ,WAAEC,GAAeJ,EAErCM,EAAmBF,EAEnBG,EAAYA,KACvB,MAAMC,EAAeJ,IACrB,OAAOK,OAAOC,OAAO,CAAC,EAAG,CAAEC,KAAM,CAAC,GAAiB,MAAZH,OAAY,EAAZA,EAAcI,S,sPCPjDC,EAASC,IAAkC,IAAjC,OAACF,EAAM,SAAEG,GAAmBD,EAANE,E,2IAAKC,CAAAH,EAAAI,GACvC,MAAOC,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,CAAC,GAEhCC,GAAmBC,EAAAA,EAAAA,aAAY,CAACC,EAAWC,KAC7CL,EAAWD,GACAV,OAAOC,OAAO,CAAC,EAAGS,EAAQ,CAAC,CAACK,GAA6B,oBAAVC,EAAuBA,EAAMN,EAAOK,IAAcC,MAE7G,IAEH,OAAOC,IAAAA,cAACxB,EAAQ,CAACuB,MAAKE,EAAA,GAAMX,EAAO,CAAAG,SAAQP,SAAQQ,YAAWE,sBACzDP,IAIIa,EAAgBC,IAA0C,IAAzC,OAACC,EAAQC,UAAAC,GAAY,EAAI,SAAEjB,GAASc,EAC9D,MAAOI,EAAQC,IAAab,EAAAA,EAAAA,WAAS,IAC/B,OAACF,EAAM,UAAEC,GAAahB,IACtB+B,GAAYC,EAAAA,EAAAA,QAAO,MACnBC,GAAYD,EAAAA,EAAAA,QAAON,GAiBzB,OAhBAQ,EAAAA,EAAAA,WAAU,KACND,EAAUE,UAAUC,KAAMC,IACtBrB,EAAWD,IACP,MAAMuB,EAAajC,OAAOC,OAAO,CAAC,EAAGS,EAAQsB,GAE7C,OADAN,EAAUI,QAAUG,EACbA,OAGhB,KAEHJ,EAAAA,EAAAA,WAAU,KACFnB,IAAWgB,EAAUI,SACrBL,GAAU,IAEf,CAACf,IAEAa,IAAcC,EACP,KAGJlB,GAGE4B,EAAkBnB,IAC3B,MAAM,OAACL,GAAUf,IACjB,OAAOe,EAAOK,IAGLoB,EAAcC,IAA2B,IAA1B,UAACrB,EAAS,SAAET,GAAS8B,EAE7C,OAAO9B,EAAS,CAACU,MADHkB,EAAenB,MAIpBsB,EAASC,IAAgB,IAAf,SAAChC,GAASgC,EAE7B,OAAOhC,EADQR,K","sources":["../../node_modules/@kne/global-context/src/createContext.js","../../node_modules/@kne/global-context/src/globalContext.js","../../node_modules/@kne/global-context/src/Global.js"],"sourcesContent":["import {\n  createContext as createReactContext, useContext as useReactContext\n} from \"react\";\n\nconst createContext = (initValue = {}) => {\n  const context = createReactContext(initValue);\n  const { Provider, Consumer } = context;\n  const useContext = () => useReactContext(context);\n\n  return { context, Provider, Consumer, useContext };\n};\n\nexport default createContext;\n","import createContext from \"./createContext\";\n\nexport const context = createContext({});\n\nexport const { Provider, Consumer, useContext } = context;\n\nexport const useGlobalContext = useContext;\n\nexport const usePreset = () => {\n  const contextValue = useContext();\n  return Object.assign({}, { apis: {} }, contextValue?.preset);\n};\n\nexport default context;\n","import React, {useState, useCallback, useEffect, useRef} from \"react\";\nimport {Provider, useContext, usePreset} from \"./globalContext\";\n\nconst Global = ({preset, children, ...props}) => {\n    const [global, setGlobal] = useState({});\n\n    const setGlobalWithKey = useCallback((globalKey, value) => {\n        setGlobal((global) => {\n            return Object.assign({}, global, {[globalKey]: typeof value === \"function\" ? value(global[globalKey]) : value});\n        });\n    }, []);\n\n    return <Provider value={{...props, global, preset, setGlobal, setGlobalWithKey}}>\n        {children}\n    </Provider>;\n};\n\nexport const GlobalSetting = ({loader, needReady = true, children}) => {\n    const [loaded, setLoaded] = useState(false);\n    const {global, setGlobal} = useContext();\n    const globalRef = useRef(null);\n    const loaderRef = useRef(loader);\n    useEffect(() => {\n        loaderRef.current().then((target) => {\n            setGlobal((global) => {\n                const nextGlobal = Object.assign({}, global, target);\n                globalRef.current = nextGlobal;\n                return nextGlobal;\n            });\n        });\n    }, []);\n\n    useEffect(() => {\n        if (global === globalRef.current) {\n            setLoaded(true);\n        }\n    }, [global]);\n\n    if (needReady && !loaded) {\n        return null;\n    }\n\n    return children;\n};\n\nexport const useGlobalValue = (globalKey) => {\n    const {global} = useContext();\n    return global[globalKey];\n};\n\nexport const GlobalValue = ({globalKey, children}) => {\n    const value = useGlobalValue(globalKey);\n    return children({value});\n};\n\nexport const Preset = ({children}) => {\n    const preset = usePreset();\n    return children(preset);\n};\n\nexport default Global;\n"],"names":["createContext","initValue","arguments","length","undefined","context","createContext$1","Provider","Consumer","useContext","useContext$1","useGlobalContext","usePreset","contextValue","Object","assign","apis","preset","Global","_ref","children","props","_objectWithoutPropertiesLoose","_excluded","global","setGlobal","useState","setGlobalWithKey","useCallback","globalKey","value","React","_extends","GlobalSetting","_ref2","loader","needReady","_needReady","loaded","setLoaded","globalRef","useRef","loaderRef","useEffect","current","then","target","nextGlobal","useGlobalValue","GlobalValue","_ref3","Preset","_ref4"],"sourceRoot":""}